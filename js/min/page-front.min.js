"use strict";function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,e){if(r){if("string"==typeof r)return _arrayLikeToArray(r,e);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,e):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,e){(null==e||e>r.length)&&(e=r.length);for(var t=0,o=Array(e);t<e;t++)o[t]=r[t];return o}$(document).ready(function(){function r(r,e){var t="";_toConsumableArray(document.querySelectorAll("".concat(r," .item"))).reduce(function(r,t,o,n){return o%e==0&&r.push(n.slice(o,o+e)),r},[]).forEach(function(r){var e="";r.forEach(function(r){"undefined"!==r.outerHTML&&(e+=r.outerHTML)}),t+="<div class='items__group'>"+e+"</div>"}),document.querySelector(".program__list").innerHTML=t}var e=function(){$(window).width()<768?r(".program__list",4):(console.log(1),r(".program__list",7))};$(window).resize(function(){e()}),e(),$(".program__slider").slick({infinite:!0,speed:300,centerMode:!1,arrows:!1,slidesToScroll:1,prevArrow:'<button class="slick-prev slick-arrow arrow--main" aria-label="Previous" type="button"></button>',nextArrow:'<button class="slick-next slick-arrow arrow--main" aria-label="Next" type="button"></button>',dots:!0,responsive:[{breakpoint:767,settings:{slidesToShow:1}},{breakpoint:9999,settings:"unslick"}]}).on("afterChange",function(r){$(window).scroll()}),$(".courses__slider").slick({infinite:!0,speed:300,centerMode:!1,arrows:!0,slidesToScroll:1,prevArrow:'<button class="slick-prev slick-arrow arrow--main" aria-label="Previous" type="button"></button>',nextArrow:'<button class="slick-next slick-arrow arrow--main" aria-label="Next" type="button"></button>',responsive:[{breakpoint:767,settings:{slidesToShow:1}},{breakpoint:1100,settings:{slidesToShow:2}},{breakpoint:1400,settings:{slidesToShow:3}}]}).on("afterChange",function(r){$(window).scroll()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2UtZnJvbnQuanMiXSwibmFtZXMiOlsiJCIsImRvY3VtZW50IiwicmVhZHkiLCJncm91cEl0ZW1zIiwicGFyZW50Q29udGFpbmVyIiwiaXRlbXNJbkdyb3AiLCJuZXdIdG1sIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwicXVlcnlTZWxlY3RvckFsbCIsImNvbmNhdCIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwiY3VycmVudFZhbHVlIiwiY3VycmVudEluZGV4IiwiYXJyYXkiLCJwdXNoIiwic2xpY2UiLCJmb3JFYWNoIiwicCIsIm5ld0dyb3VwIiwiaXRlbSIsIm91dGVySFRNTCIsInF1ZXJ5U2VsZWN0b3IiLCJpbm5lckhUTUwiLCJjaGFuZ2VDb2x1bXNDb3VudCIsIndpbmRvdyIsIndpZHRoIiwiY29uc29sZSIsImxvZyIsInJlc2l6ZSIsInNsaWNrIiwiaW5maW5pdGUiLCJzcGVlZCIsImNlbnRlck1vZGUiLCJhcnJvd3MiLCJzbGlkZXNUb1Njcm9sbCIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsImRvdHMiLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludCIsInNldHRpbmdzIiwic2xpZGVzVG9TaG93Iiwib24iLCJlIiwic2Nyb2xsIl0sIm1hcHBpbmdzIjoiODlCQUFBQSxFQUFFQyxVQUFVQyxNQUFNLFdBQ2QsUUFBU0MsR0FBWUMsRUFBaUJDLEdBQ2xDLEdBQUlDLEdBQVUsRUFDZEMsb0JBQUlOLFNBQVNPLGlCQUFnQixHQUFBQyxPQUFJTCxFQUFlLFlBQzNDTSxPQUFPLFNBQUNDLEVBQWFDLEVBQWNDLEVBQWNDLEdBSTlDLE1BSElELEdBQWVSLEdBQWdCLEdBQy9CTSxFQUFZSSxLQUFLRCxFQUFNRSxNQUFNSCxFQUFjQSxFQUFlUixJQUV2RE0sT0FFVk0sUUFBUSxTQUFBQyxHQUNMLEdBQUlDLEdBQVcsRUFFZkQsR0FBRUQsUUFBUyxTQUFBRyxHQUNnQixjQUFuQkEsRUFBS0MsWUFDTEYsR0FBWUMsRUFBS0MsYUFJekJmLEdBQVcsNkJBQWlDYSxFQUFXLFdBRy9EbEIsU0FBU3FCLGNBQWMsa0JBQWtCQyxVQUFZakIsRUFLekQsR0FBTWtCLEdBQW9CLFdBQ0Z4QixFQUFHeUIsUUFBU0MsUUFFZCxJQUNkdkIsRUFBVyxpQkFBa0IsSUFFN0J3QixRQUFRQyxJQUFJLEdBQ1p6QixFQUFXLGlCQUFrQixJQUlyQ0gsR0FBR3lCLFFBQVNJLE9BQVEsV0FBUUwsTUFDNUJBLElBR0F4QixFQUFFLG9CQUVHOEIsT0FDR0MsVUFBVSxFQUNWQyxNQUFPLElBQ1BDLFlBQVksRUFFWkMsUUFBUSxFQUNSQyxlQUFnQixFQUNoQkMsVUFBVyxtR0FDWEMsVUFBVywrRkFDWEMsTUFBTSxFQUNOQyxhQUVRQyxXQUFZLElBQ1pDLFVBQ0lDLGFBQWMsS0FJbEJGLFdBQVksS0FDWkMsU0FBVSxjQUtyQkUsR0FBRyxjQUFlLFNBQUFDLEdBQ2Y1QyxFQUFFeUIsUUFBUW9CLFdBV2xCN0MsRUFBRSxvQkFFRzhCLE9BQ0dDLFVBQVUsRUFDVkMsTUFBTyxJQUNQQyxZQUFZLEVBRVpDLFFBQVEsRUFDUkMsZUFBZ0IsRUFDaEJDLFVBQVcsbUdBQ1hDLFVBQVcsK0ZBQ1hFLGFBRVFDLFdBQVksSUFDWkMsVUFDSUMsYUFBYyxLQUlsQkYsV0FBWSxLQUNaQyxVQUNJQyxhQUFjLEtBSWxCRixXQUFZLEtBQ1pDLFVBQ0lDLGFBQWMsT0FNN0JDLEdBQUcsY0FBZSxTQUFBQyxHQUNmNUMsRUFBRXlCLFFBQVFvQiIsImZpbGUiOiJqcy9taW4vcGFnZS1mcm9udC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIkKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBncm91cEl0ZW1zIChwYXJlbnRDb250YWluZXIsIGl0ZW1zSW5Hcm9wKSB7XG4gICAgICAgIGxldCBuZXdIdG1sID0gJyc7XG4gICAgICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAke3BhcmVudENvbnRhaW5lcn0gLml0ZW1gKV1cbiAgICAgICAgICAgIC5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUsIGN1cnJlbnRJbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ICUgaXRlbXNJbkdyb3AgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3IucHVzaChhcnJheS5zbGljZShjdXJyZW50SW5kZXgsIGN1cnJlbnRJbmRleCArIGl0ZW1zSW5Hcm9wKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgICAgICAgIH0sIFtdKVxuICAgICAgICAgICAgLmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0dyb3VwID0gJyc7XG4gICAgXG4gICAgICAgICAgICAgICAgcC5mb3JFYWNoKCBpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ub3V0ZXJIVE1MICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3R3JvdXAgKz0gaXRlbS5vdXRlckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG5ld0h0bWwgKz0gJzxkaXYgY2xhc3M9XFwnaXRlbXNfX2dyb3VwXFwnPicgKyBuZXdHcm91cCArICc8L2Rpdj4nO1xuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmFtX19saXN0JykuaW5uZXJIVE1MID0gbmV3SHRtbDtcbiAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgY29uc3QgY2hhbmdlQ29sdW1zQ291bnQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gJCggd2luZG93ICkud2lkdGgoKTtcbiAgICBcbiAgICAgICAgaWYoIHdpbmRvd1dpZHRoIDwgNzY4ICkge1xuICAgICAgICAgICAgZ3JvdXBJdGVtcygnLnByb2dyYW1fX2xpc3QnLCA0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKDEpO1xuICAgICAgICAgICAgZ3JvdXBJdGVtcygnLnByb2dyYW1fX2xpc3QnLCA3KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgJCggd2luZG93ICkucmVzaXplKCAoKSA9PiB7IGNoYW5nZUNvbHVtc0NvdW50KCk7IH0pO1xuICAgIGNoYW5nZUNvbHVtc0NvdW50KCk7XG4gICAgXG4gICAgXG4gICAgJCgnLnByb2dyYW1fX3NsaWRlcicpXG4gICAgXG4gICAgICAgIC5zbGljayh7XG4gICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgIHNwZWVkOiAzMDAsXG4gICAgICAgICAgICBjZW50ZXJNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIHZhcmlhYmxlV2lkdGg6IHRydWUsXG4gICAgICAgICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICBwcmV2QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldiBzbGljay1hcnJvdyBhcnJvdy0tbWFpblwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj48L2J1dHRvbj4nLFxuICAgICAgICAgICAgbmV4dEFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLW5leHQgc2xpY2stYXJyb3cgYXJyb3ctLW1haW5cIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHR5cGU9XCJidXR0b25cIj48L2J1dHRvbj4nLFxuICAgICAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDc2NyxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA5OTk5LFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczogJ3Vuc2xpY2snLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgXG4gICAgICAgIC5vbignYWZ0ZXJDaGFuZ2UnLCBlID0+IHtcbiAgICAgICAgICAgICQod2luZG93KS5zY3JvbGwoKTtcbiAgICAgICAgfSk7XG4gICAgXG4gICAgXG4gICAgLy8gPCEtLSA8P3BocCBmb3JlYWNoICggYXJyYXlfY2h1bmsoJHByb2dyYW0sIDQpIGFzICRrZXkgPT4gJGdyb3VwICkgOiA/PiAtLT5cbiAgICBcbiAgICAvLyAgICAgICAgICAgICAgICAgPCEtLSA8P3BocCAka2V5KysgPz4gLS0+XG4gICAgLy8gICAgICAgICAgICAgICAgIDwhLS0gPD9waHAgaWYoICgka2V5ICUgNCkgPT09IDAgKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAvLyBlY2hvICc8ZGl2IGNsYXNzPVwicHJvZ3JhbV9fZ3JvdXBcIj4nO1xuICAgIC8vICAgICAgICAgICAgICAgICB9ID8+IC0tPlxyXG4gICAgXG4gICAgJCgnLmNvdXJzZXNfX3NsaWRlcicpXG4gICAgXG4gICAgICAgIC5zbGljayh7XG4gICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgIHNwZWVkOiAzMDAsXG4gICAgICAgICAgICBjZW50ZXJNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIHZhcmlhYmxlV2lkdGg6IHRydWUsXG4gICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgIHByZXZBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1wcmV2IHNsaWNrLWFycm93IGFycm93LS1tYWluXCIgYXJpYS1sYWJlbD1cIlByZXZpb3VzXCIgdHlwZT1cImJ1dHRvblwiPjwvYnV0dG9uPicsXG4gICAgICAgICAgICBuZXh0QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stbmV4dCBzbGljay1hcnJvdyBhcnJvdy0tbWFpblwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdHlwZT1cImJ1dHRvblwiPjwvYnV0dG9uPicsXG4gICAgICAgICAgICByZXNwb25zaXZlOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTEwMCxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxNDAwLFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICBcbiAgICAgICAgLm9uKCdhZnRlckNoYW5nZScsIGUgPT4ge1xuICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbCgpO1xuICAgICAgICB9KTtcbiAgICBcclxufSk7Il19
