"use strict";function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,e){if(r){if("string"==typeof r)return _arrayLikeToArray(r,e);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,e):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,e){(null==e||e>r.length)&&(e=r.length);for(var t=0,o=Array(e);t<e;t++)o[t]=r[t];return o}$(document).ready(function(){_toConsumableArray(document.querySelectorAll(".program__item")).reduce(function(r,e,t,o){return t%4==0&&r.push(o.slice(t,t+4)),r},[]).forEach(function(r){var e="";"undefined"!==r[0].outerHTML&&(e+=r[3].outerHTML),console.log(e)}),$(".courses__slider").slick({infinite:!0,speed:300,centerMode:!1,arrows:!0,slidesToScroll:1,prevArrow:'<button class="slick-prev slick-arrow arrow--main" aria-label="Previous" type="button"></button>',nextArrow:'<button class="slick-next slick-arrow arrow--main" aria-label="Next" type="button"></button>',responsive:[{breakpoint:767,settings:{slidesToShow:1}},{breakpoint:1100,settings:{slidesToShow:2}},{breakpoint:1400,settings:{slidesToShow:3}}]}).on("afterChange",function(r){$(window).scroll()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2UtZnJvbnQuanMiXSwibmFtZXMiOlsiJCIsImRvY3VtZW50IiwicmVhZHkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJjdXJyZW50VmFsdWUiLCJjdXJyZW50SW5kZXgiLCJhcnJheSIsInB1c2giLCJzbGljZSIsImZvckVhY2giLCJwIiwibmV3R3JvdXAiLCJvdXRlckhUTUwiLCJjb25zb2xlIiwibG9nIiwic2xpY2siLCJpbmZpbml0ZSIsInNwZWVkIiwiY2VudGVyTW9kZSIsImFycm93cyIsInNsaWRlc1RvU2Nyb2xsIiwicHJldkFycm93IiwibmV4dEFycm93IiwicmVzcG9uc2l2ZSIsImJyZWFrcG9pbnQiLCJzZXR0aW5ncyIsInNsaWRlc1RvU2hvdyIsIm9uIiwiZSIsIndpbmRvdyIsInNjcm9sbCJdLCJtYXBwaW5ncyI6Ijg5QkFBQUEsRUFBRUMsVUFBVUMsTUFBTSxXQUVkQyxtQkFBSUYsU0FBU0csaUJBQWlCLG1CQUN6QkMsT0FBTyxTQUFDQyxFQUFhQyxFQUFjQyxFQUFjQyxHQUk5QyxNQUhJRCxHQUFlLEdBQU0sR0FDckJGLEVBQVlJLEtBQUtELEVBQU1FLE1BQU1ILEVBQWNBLEVBQWUsSUFFdkRGLE9BRVZNLFFBQVEsU0FBQUMsR0FDTCxHQUFJQyxHQUFXLEVBQ1EsZUFBbkJELEVBQUUsR0FBR0UsWUFDTEQsR0FBWUQsRUFBRSxHQUFHRSxXQUVyQkMsUUFBUUMsSUFBSUgsS0E0Q3BCZCxFQUFFLG9CQUVHa0IsT0FDR0MsVUFBVSxFQUNWQyxNQUFPLElBQ1BDLFlBQVksRUFFWkMsUUFBUSxFQUNSQyxlQUFnQixFQUNoQkMsVUFBVyxtR0FDWEMsVUFBVywrRkFDWEMsYUFFUUMsV0FBWSxJQUNaQyxVQUNJQyxhQUFjLEtBSWxCRixXQUFZLEtBQ1pDLFVBQ0lDLGFBQWMsS0FJbEJGLFdBQVksS0FDWkMsVUFDSUMsYUFBYyxPQU03QkMsR0FBRyxjQUFlLFNBQUFDLEdBQ2YvQixFQUFFZ0MsUUFBUUMiLCJmaWxlIjoianMvbWluL3BhZ2UtZnJvbnQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xyXG4gICAgXG4gICAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9ncmFtX19pdGVtJyldXG4gICAgICAgIC5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUsIGN1cnJlbnRJbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggJSA0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWNjdW11bGF0b3IucHVzaChhcnJheS5zbGljZShjdXJyZW50SW5kZXgsIGN1cnJlbnRJbmRleCArIDQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgICAgfSwgW10pXG4gICAgICAgIC5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0dyb3VwID0gJyc7XG4gICAgICAgICAgICBpZiAocFswXS5vdXRlckhUTUwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbmV3R3JvdXAgKz0gcFszXS5vdXRlckhUTUw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhuZXdHcm91cCk7XG4gICAgICAgICAgICAvLyBsZXQgbmV3X2h0bWwgPSAnPGRpdiBjbGFzcz1cXCdwcm9ncmFtX19ncm91cFxcJz4nICsgcFswXS5vdXRlckhUTUwgKyBwWzFdLm91dGVySFRNTCArIHBbMl0ub3V0ZXJIVE1MICsgcFszXS5vdXRlckhUTUwgKyAnPC9kaXY+JztcbiAgICAgICAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmFtX19saXN0JykuaW5uZXJIVE1MID0gbmV3X2h0bWw7XG4gICAgICAgIH0pO1xuICAgIFxuICAgIFxuICAgIC8vICQoJy5wcm9ncmFtX19zbGlkZXInKVxuICAgIFxuICAgIC8vICAgICAuc2xpY2soe1xuICAgIC8vICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgLy8gICAgICAgICBzcGVlZDogMzAwLFxuICAgIC8vICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgLy8gICAgICAgICAvLyB2YXJpYWJsZVdpZHRoOiB0cnVlLFxuICAgIC8vICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAvLyAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgIC8vICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLXByZXYgc2xpY2stYXJyb3cgYXJyb3ctLW1haW5cIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0eXBlPVwiYnV0dG9uXCI+PC9idXR0b24+JyxcbiAgICAvLyAgICAgICAgIG5leHRBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1uZXh0IHNsaWNrLWFycm93IGFycm93LS1tYWluXCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0eXBlPVwiYnV0dG9uXCI+PC9idXR0b24+JyxcbiAgICAvLyAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgLy8gICAgICAgICByZXNwb25zaXZlOiBbXG4gICAgLy8gICAgICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXG4gICAgLy8gICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgICAgICB9LFxuICAgIC8vICAgICAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogOTk5OSxcbiAgICAvLyAgICAgICAgICAgICAgICAgc2V0dGluZ3M6ICd1bnNsaWNrJyxcbiAgICAvLyAgICAgICAgICAgICB9LFxuICAgIC8vICAgICAgICAgXVxuICAgIC8vICAgICB9KVxuICAgIFxuICAgIC8vICAgICAub24oJ2FmdGVyQ2hhbmdlJywgZSA9PiB7XG4gICAgLy8gICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKCk7XG4gICAgLy8gICAgIH0pO1xuICAgIFxuICAgIFxuICAgIC8vIDwhLS0gPD9waHAgZm9yZWFjaCAoIGFycmF5X2NodW5rKCRwcm9ncmFtLCA0KSBhcyAka2V5ID0+ICRncm91cCApIDogPz4gLS0+XG4gICAgXG4gICAgLy8gICAgICAgICAgICAgICAgIDwhLS0gPD9waHAgJGtleSsrID8+IC0tPlxuICAgIC8vICAgICAgICAgICAgICAgICA8IS0tIDw/cGhwIGlmKCAoJGtleSAlIDQpID09PSAwICkge1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgLy8gZWNobyAnPGRpdiBjbGFzcz1cInByb2dyYW1fX2dyb3VwXCI+JztcbiAgICAvLyAgICAgICAgICAgICAgICAgfSA/PiAtLT5cclxuICAgIFxuICAgICQoJy5jb3Vyc2VzX19zbGlkZXInKVxuICAgIFxuICAgICAgICAuc2xpY2soe1xuICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICBzcGVlZDogMzAwLFxuICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgICAgICAgICAvLyB2YXJpYWJsZVdpZHRoOiB0cnVlLFxuICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICBwcmV2QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldiBzbGljay1hcnJvdyBhcnJvdy0tbWFpblwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj48L2J1dHRvbj4nLFxuICAgICAgICAgICAgbmV4dEFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLW5leHQgc2xpY2stYXJyb3cgYXJyb3ctLW1haW5cIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHR5cGU9XCJidXR0b25cIj48L2J1dHRvbj4nLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzY3LFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDExMDAsXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTQwMCxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgXG4gICAgICAgIC5vbignYWZ0ZXJDaGFuZ2UnLCBlID0+IHtcbiAgICAgICAgICAgICQod2luZG93KS5zY3JvbGwoKTtcbiAgICAgICAgfSk7XG4gICAgXHJcbn0pOyJdfQ==
